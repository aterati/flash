[{"E:\\Git\\flash\\src\\index.js":"1","E:\\Git\\flash\\src\\reportWebVitals.js":"2"},{"size":6967,"mtime":1608531919640,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":499162500000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"wnxyj1",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"E:\\Git\\flash\\src\\index.js",["12","13","14","15"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import 'font-awesome/css/font-awesome.min.css';\n\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Image from 'react-bootstrap/Image';\nimport Button from 'react-bootstrap/Button';\nimport { Card, Col, Container, Form, Nav, Navbar, NavDropdown, Row } from 'react-bootstrap';\nimport { Star, PersonBadge, StarFill } from 'react-bootstrap-icons';\n// import {  } from 'react-router';\nimport { BrowserRouter as Router, Route,Switch, useParams } from 'react-router-dom';\nimport { products } from './productsInfo.json';\n\n// import {bose} from '';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// function Clock(props){\n//   return (\n\n//   );\n// }\n\nfunction NavHeader() {\n  return (<Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"/home\">Slick Deals</Navbar.Brand>\n    <Navbar.Collapse id=\"nav-collapse\" >\n\n      <Nav.Item>\n        <Nav.Link href=\"/home\">Deals</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link href=\"/home\">Coupons</Nav.Link>\n      </Nav.Item>\n\n    </Navbar.Collapse>\n  </Navbar>);\n}\n\nfunction GiveThanks(props) {\n  return (\n    <Form className=\"text-center\">\n      <Form.Group as={Row}>\n        <Form.Text size=\"sm\" className=\"text-muted\">\n          <PersonBadge /> {props.submitter} posted this deal. Say thanks!\n          </Form.Text>\n        <Form.Text size=\"sm\" className=\"text-muted\">\n          <StarFill color=\"gold\" > </StarFill>\n          <a href=\"#\">\n            Give Thanks\n      </a>\n\n        </Form.Text>\n\n      </Form.Group>\n    </Form>\n\n  )\n}\n\nfunction Blog(props) {\n\n  let colors = props.blog.available_colors;\n  colors = colors.map((color) =>\n    <li key={color.toString()}><a href=\"/color\">{color}</a></li>\n  );\n\n  return (\n\n    <Container className=\"bg-main-container w-75\">\n      <h1 className=\"dealTitle\">{props.blog.title}</h1>\n      <Row md=\"11\" >\n        <Col md=\"8\">\n\n          <div>\n            <b>{props.blog.dealPrice} </b>\n            <strike>{props.blog.originalPrice}</strike>\n          + {props.blog.shipping} shipping\n          </div>\n          <br />\n          <p>{props.blog.content_line1}</p>\n          <p>{props.blog.content_line2}</p>\n          <p>Available colors:</p>\n          <ul>\n            {colors}\n          </ul>\n        </Col>\n        <Col md=\"3\">\n          <Image src={props.blog.image_url} className='productImage' />\n          <br /><br /><br /><br /><br />\n          <Button className=\"deal-green-button\" block>See Deal</Button>\n          <GiveThanks submitter={props.blog.submitter} />\n        </Col>\n      </Row>\n    </Container>\n\n  );\n}\n\nfunction ProductCard(props) {\n  console.log(props.blog);\n  return (\n\n    <Card className=\"productCard\">\n      <Card.Img className=\"productCardImage\" variant=\"top\" src={props.blog.image_url} />\n      <Card.Body>\n        <Card.Text>\n          {props.blog.title}\n        </Card.Text>\n        <Card.Text>\n          <b>{props.blog.dealPrice}</b>\n          <strike>{props.blog.originalPrice}</strike>\n          <Form.Text className=\"text-muted\">\n            More\n              </Form.Text>\n        </Card.Text>\n        <Button variant=\"secondary\" href={`/productDetails/${props.blog.id}`}>View Details</Button>\n      </Card.Body>\n    </Card>\n  );\n\n\n}\n\nfunction HomeController(props) {\n\n  let productCards = products.map((blogItem) => {\n    return (<Col md={3}> <ProductCard blog={blogItem} />\n    </Col>);\n  });\n\n  return (\n    <div>\n      {/* <NavHeader /> */}\n      <br />\n      <Container>\n        <Row>\n\n          {productCards}\n\n        </Row>\n\n\n      </Container>\n    </div>\n  );\n}\n\nfunction BlogController(props) {\n\n  var {id} = useParams();\n  const blog = products.map((blogItem) => {\n\n    if(parseInt(id) === blogItem.id)\n    return <Blog key={blogItem.id} blog={blogItem}/>;\n  }  );\n\n  // const sideBar = blogData.map((blogItem) => <SideBar key={blogItem.id} blog={blogItem} />);\n\n  // const numberList = numbers.map((number) =>\n  //   <ListItem key={number.toString()}\n  //     id={number.toString()}\n  //     number={number} />\n  // );\n\n  return (\n    <div>\n\n\n\n      <br />\n\n      {blog}\n\n\n\n\n    </div>\n  );\n\n}\n\nfunction SlickAppController() {\n\n  return (\n    <div>\n      <Router >\n        <NavHeader />\n        <Switch>\n          <Route path=\"/home\"><HomeController /></Route>\n          <Route path=\"/blog\"><BlogController /></Route>\n          <Route path=\"/productDetails/:id\"><BlogController /></Route>\n          <Route path=\"/\"><BlogController /></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\n\nReactDOM.render(<SlickAppController />, document.getElementById('root'));\n\n\n\n/* function UserGreeting(){\n  return <h1>Welcome back</h1>;\n}\n\nfunction GuestGreeting(){\n  return <h1>Please log in</h1>;\n}\n\n\nfunction WelcomeGreeting(props){\n  const loggedIn = props.isLoggedIn;\n  if(loggedIn){\n    return <UserGreeting />;\n  } else{\n    return <GuestGreeting />;\n  }\n}\n\nclass LoginControl extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleLogIn = this.handleLogIn.bind(this);\n    this.handleLogOut = this.handleLogOut.bind(this);\n    this.state={\n      isLoggedIn: false\n    }\n  }\n\n  handleLogOut(){\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  handleLogIn(){\n    this.setState({\n      isLoggedIn: true\n    })\n  }\n\n  render(){\n  let button;\n\n  if(this.state.isLoggedIn){\n    button =<button onClick={this.handleLogOut} > Logout </button>\n  } else{\n    button =<button onClick={this.handleLogIn} > LogIn </button>\n  }\n  return (\n    <div>\n      <WelcomeGreeting isLoggedIn = {this.state.isLoggedIn} />\n      {button}\n    </div>\n  );\n  }\n}\n\n\nReactDOM.render(<LoginControl/>, document.getElementById('root'));\n\n/* class ClassyClock extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      isToggleOn: true\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      this.setState({\n        date: new Date()\n      })\n    }, 1000);\n  }\n\n  componentDidUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  handleClick() {\n    this.setState({\n      isToggleOn: !this.state.isToggleOn\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Welcome to my clock example</h1>\n        <h3>{this.state.date.toLocaleString()}</h3>\n        <br />\n        <button onClick={this.handleClick}>{this.state.isToggleOn ? 'ON' : 'OFF'}</button>\n      </div>\n    );\n  }\n} */\n\n// ReactDOM.render(\n//   <ClassyClock  />, document.getElementById('root')\n// );\n\n\n\n// setInterval(Home, 1000);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","E:\\Git\\flash\\src\\reportWebVitals.js",[],["16","17"],{"ruleId":"18","severity":1,"message":"19","line":11,"column":51,"nodeType":"20","messageId":"21","endLine":11,"endColumn":62},{"ruleId":"18","severity":1,"message":"22","line":12,"column":10,"nodeType":"20","messageId":"21","endLine":12,"endColumn":14},{"ruleId":"23","severity":1,"message":"24","line":57,"column":11,"nodeType":"25","endLine":57,"endColumn":23},{"ruleId":"26","severity":1,"message":"27","line":160,"column":40,"nodeType":"28","messageId":"29","endLine":160,"endColumn":42},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},"no-unused-vars","'NavDropdown' is defined but never used.","Identifier","unusedVar","'Star' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-global-assign","no-unsafe-negation"]